<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>动态规划 状态dp</title>
      <link href="/2023/03/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%E5%88%86%E7%8A%B6%E6%80%81/"/>
      <url>/2023/03/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%E5%88%86%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划-状态dp"><a href="#动态规划-状态dp" class="headerlink" title="动态规划 状态dp"></a>动态规划 状态dp</h1><p>最近投暑期实习，笔试题中有很多动态规划的题。之前动态规划的题很早之前只做过一遍，早都没有印象了，笔试中遇到不少，在此记录几道<br>分别来自完美世界和携程 关于动态规划的题</p><hr><h2 id="完美-T-1"><a href="#完美-T-1" class="headerlink" title="完美 T.1"></a>完美 T.1</h2><p>题目：小明设计了一款游戏，一个角色有n个技能，每个技能分别能打出ai点伤害，技能次数可以无限用，问总共要正好打出target点伤害，最少要用几次技能？<br>输入：n,ai,target<br>输出：最少次数</p><p>解：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> target;</span><br><span class="line">    cin&gt;&gt;target</span><br><span class="line">    <span class="type">int</span> kill;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; skills;</span><br><span class="line">    skills.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">        cin&gt;&gt;kill;</span><br><span class="line">        skills.<span class="built_in">push_back</span>(kill);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target+<span class="number">1</span>,INT_MAX)</span></span>;</span><br><span class="line">    <span class="comment">// dp[i]:要打出i点伤害，最少用dp[i]次技能</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 确定递归公式：dp[i] = min(dp[i]，dp[i-skills[j]]+1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先遍历技能，再遍历目标伤害，注意遍历顺序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=target;j++){</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=skills[i] &amp;&amp; dp[j-skills[i]]!=INT_MAX)</span><br><span class="line">                dp[j] = <span class="built_in">min</span>(dp[j],dp[j-skills[i]]+<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dp[target]==INT_MAX) cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;dp[target];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这道题和leetcode上的322.零钱兑换是一样的</p><p>这道题要注意：</p><ul><li>首先是完全背包问题，<strong>01背包问题一维数组只能先遍历物品再遍历背包容量，且第二层for循环是从大到小遍历。</strong></li><li>其次是先遍历物品还是先遍历背包都是可以的，且<strong>第二层for循环是从小到大遍历</strong></li><li><strong>如果求组合数就是外层for循环遍历物品，内层for遍历背包</strong>。 <strong>如果求排列数就是外层for遍历背包，内层for循环遍历物品</strong>。<br>因为这道题只求组合数最小即可，所以遍历顺序不用在乎</li><li>INT_MIN、INT_MAX的头文件是 #include&lt;limits.h&gt;</li></ul><hr><h2 id="携程-T-4"><a href="#携程-T-4" class="headerlink" title="携程 T.4"></a>携程 T.4</h2><p>题目：小明正在逛超市，有n个商品摆成排，第个商品的价格为ai,小明对它的真爱度为b。所有商品的价格都是偶数。<br>超市开展了一个活动， 当游游花费原价买了一件商品时，她可以用半价买下一件右边相邻的商品(也可以用原价购买，这样该商品右边的商品<br>就有 一次享受半价的机会) 。但如果小明半价购买了一件商品， 那么下一件右边相邻的商品只能原价购买。<br>换言之，如果小明想要半价买某一件商品，必须先用原价买下它相邻的左边的那个商品。<br>小明初始的钱为 x，她想要买的商品的喜爱度总和尽可能大，但总价格不能超过 x，你能帮帮她计算最大的喜爱度总和吗?<br>n &amp; a大于1 小于 1000<br>b大于1小于 10e9</p><p>解：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">// n元钱</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="comment">// num个物品</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cin&gt;&gt;num;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; prices;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; likes;</span><br><span class="line">prices.<span class="built_in">clear</span>();</span><br><span class="line">likes.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++){</span><br><span class="line">cin&gt;&gt;tmp;</span><br><span class="line">prices.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++){</span><br><span class="line">cin&gt;&gt;tmp;</span><br><span class="line">likes.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 0:不买  1：半价买   2：全价买</span></span><br><span class="line">vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(num,vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>,<span class="number">0</span>)));</span><br><span class="line"><span class="comment">//dp[i][j][0] : i元钱时 不买能达到的最大满意度</span></span><br><span class="line"><span class="comment">//dp[i][j][1] : i元钱时  半价买能达到的最大满意度</span></span><br><span class="line"><span class="comment">//dp[i][j][2] : i元钱时  全价买能达到的最大满意度</span></span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++){</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = n ;j&gt;=prices[i];j--){</span><br><span class="line">dp[i][j][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j][<span class="number">0</span>],<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j][<span class="number">1</span>],dp[i<span class="number">-1</span>][j][<span class="number">2</span>]));</span><br><span class="line">dp[i][j][<span class="number">1</span>] = dp[i<span class="number">-1</span>][j-prices[i]/<span class="number">2</span>][<span class="number">2</span>] + likes[i];</span><br><span class="line">dp[i][j][<span class="number">2</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j-prices[i]][<span class="number">0</span>]+ likes[i],<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j-prices[i]][<span class="number">1</span>]+ likes[i],dp[i<span class="number">-1</span>][j-prices[i]][<span class="number">2</span>]+ likes[i]));</span><br><span class="line">cout&lt;&lt;<span class="string">"for:"</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;dp[i][j][<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;dp[i][j][<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;dp[i][j][<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">cout&lt;&lt;<span class="string">"-----------------------------"</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">max</span>(dp[num<span class="number">-1</span>][n][<span class="number">1</span>] ,<span class="built_in">max</span>(dp[num<span class="number">-1</span>][n][<span class="number">0</span>] ,dp[num<span class="number">-1</span>][n][<span class="number">2</span>]))&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这题目跟股票题目有点像，也是分状态，但是上面的代码写的不对，现在还没找到问题在哪，先记录一下，后期更新</p><hr><p>不知道为啥，携程笔试答的很烂，第三题甚至没读懂题要干什么，竟然进面试了？<br>腾讯wxg一面说还不错，直接反手挂…<br>米哈游感谢信，寄<br>唉，暑期实习的笔试答的都挺烂的，算法题不能停啊…</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> dp </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>段错误</title>
      <link href="/2023/03/03/%E6%AE%B5%E9%94%99%E8%AF%AF/"/>
      <url>/2023/03/03/%E6%AE%B5%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="段错误如何调试？-附小demo"><a href="#段错误如何调试？-附小demo" class="headerlink" title="段错误如何调试？ 附小demo"></a>段错误如何调试？ 附小demo</h1><h2 id="Q：遇到段错误该如何解决"><a href="#Q：遇到段错误该如何解决" class="headerlink" title="Q：遇到段错误该如何解决"></a>Q：遇到段错误该如何解决</h2><hr><p>先说说gdb的基本命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">（gdb）<span class="built_in">help</span>：查看命令帮助，具体命令查询在gdb中输入<span class="built_in">help</span> + 命令,简写h</span><br><span class="line">（gdb）run：重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）,简写r</span><br><span class="line">（gdb）start：单步执行，运行程序，停在第一执行语句</span><br><span class="line">（gdb）list：查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）,简写l</span><br><span class="line">（gdb）<span class="built_in">set</span>：设置变量的值</span><br><span class="line">（gdb）next：单步调试（逐过程，函数直接执行）,简写n</span><br><span class="line">（gdb）step：单步调试（逐语句：跳入自定义函数内部执行）,简写s</span><br><span class="line">（gdb）backtrace：查看函数的调用的栈帧和层级关系,简写bt</span><br><span class="line">（gdb）frame：切换函数的栈帧,简写f</span><br><span class="line">（gdb）info：查看函数内部局部变量的数值,简写i</span><br><span class="line">（gdb）finish：结束当前函数，返回到函数调用点</span><br><span class="line">（gdb）<span class="built_in">continue</span>：继续运行,简写c</span><br><span class="line">（gdb）<span class="built_in">print</span>：打印值及地址,简写p</span><br><span class="line">（gdb）quit：退出gdb,简写q</span><br><span class="line">（gdb）<span class="built_in">break</span>+num：在第num行设置断点,简写b</span><br><span class="line">（gdb）info breakpoints：查看当前设置的所有断点</span><br><span class="line">（gdb）delete breakpoints num：删除第num个断点,简写d</span><br><span class="line">（gdb）display：追踪查看具体变量值</span><br><span class="line">（gdb）undisplay：取消追踪观察变量</span><br><span class="line">（gdb）watch：被设置观察点的变量发生修改时，打印显示</span><br><span class="line">（gdb）i watch：显示观察点</span><br><span class="line">（gdb）<span class="built_in">enable</span> breakpoints：启用断点</span><br><span class="line">（gdb）<span class="built_in">disable</span> breakpoints：禁用断点</span><br><span class="line">（gdb）x：查看内存x/20xw 显示20个单元，16进制，4字节每单元</span><br></pre></td></tr></tbody></table></figure><p><a href="https://zhuanlan.zhihu.com/p/474736535#:~:text=GDB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%201%201%E3%80%81%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4%20run%EF%BC%9A%E7%AE%80%E8%AE%B0%E4%B8%BA%20r%20%EF%BC%8C%E5%85%B6%E4%BD%9C%E7%94%A8%E6%98%AF%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%BD%93%E9%81%87%E5%88%B0%E6%96%AD%E7%82%B9%E5%90%8E%EF%BC%8C%E7%A8%8B%E5%BA%8F%E4%BC%9A%E5%9C%A8%E6%96%AD%E7%82%B9%E5%A4%84%E5%81%9C%E6%AD%A2%E8%BF%90%E8%A1%8C%EF%BC%8C%E7%AD%89%E5%BE%85%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E4%B8%8B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%91%BD%E4%BB%A4%E3%80%82%20continue%20%EF%BC%88%E7%AE%80%E5%86%99c,4%E3%80%81%E6%89%93%E5%8D%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%20...%205%205%E3%80%81%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8C%E4%BF%A1%E6%81%AF%20...%206%206%E3%80%81%E5%88%86%E5%89%B2%E7%AA%97%E5%8F%A3%20">附gdb常用命令</a></p><p>个人感觉常用的就几个,也可能是我菜，没用过高级的 <span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（gdb）r: 重新开始运行文件</span><br><span class="line">（gdb）l: 查看原代码</span><br><span class="line">（gdb）s: 单步调试（逐语句：跳入自定义函数内部执行）</span><br><span class="line">（gdb）n: 单步调试（逐过程，函数直接执行，不进入）</span><br><span class="line">（gdb）bt: 查看函数的调用的栈帧和层级关系</span><br><span class="line">（gdb）frame: 切换函数的栈帧，简写f</span><br><span class="line">（gdb）info breakpoints：查看当前设置的所有断点</span><br><span class="line">（gdb）p: 打印值及地址,简写p</span><br><span class="line">（gdb）quit: 退出gdb,简写q</span><br><span class="line">（gdb）<span class="built_in">break</span>+num：在第num行设置断点,简写 b 3</span><br><span class="line">（gdb）<span class="built_in">kill</span>: 停止当前调试(q会直接退出gdb，<span class="built_in">kill</span>仅停止当前调试)</span><br></pre></td></tr></tbody></table></figure><hr><p>ok，现在开始正文</p><p>段错误：访问的内存超出了系统所给这个程序的内存空间</p><h3 id="1-先写一段会出现段错误的代码"><a href="#1-先写一段会出现段错误的代码" class="headerlink" title="1. 先写一段会出现段错误的代码"></a>1. 先写一段会出现段错误的代码</h3><p>gdb_demo.cpp：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">   <span class="type">char</span> *buf;</span><br><span class="line"> </span><br><span class="line">   buf = <span class="built_in">malloc</span>(<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">fgets</span>(buf, <span class="number">1024</span>, stdin);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译链接成可执行文件，一定加 -g 编译时，产生调试信息<br>运行可执行文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">: g++ -g -o <span class="built_in">test</span> gdb_demo.cpp</span><br><span class="line">: ./test</span><br></pre></td></tr></tbody></table></figure><p>此时会产生core文件。<br><a href="images/core.png">core文件</a></p><p>说到这，当时用本机wsl子系统写gdb调试段错误的时候，一直没生成core文件，查了半天也没解决，用了开发机，设置一下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -c unlimited</span><br></pre></td></tr></tbody></table></figure><p>就可以生成了，<strong>但是在本机上不能，至今也没有找到解决答案</strong></p><h3 id="2-终端会显示段错误，启动gdb调试"><a href="#2-终端会显示段错误，启动gdb调试" class="headerlink" title="2. 终端会显示段错误，启动gdb调试"></a>2. 终端会显示段错误，启动gdb调试</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb demo</span><br><span class="line">(gdb run)</span><br></pre></td></tr></tbody></table></figure><p><a href="images/segment_err.png">段错误</a></p><p>其实已经把错误的地方告诉你了，通过</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">(gdb) frame 3</span><br></pre></td></tr></tbody></table></figure><p>只关心我们自己的代码，因此我们就切换到3号堆栈帧（stack frame3）来看看程序在哪里崩溃的</p><p><a href="images/frame3.png">frame3</a></p><p>只看出错的地方，这样当程序或者代码多的时候方便查看。</p><p>查看buf当前值：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p buf</span><br><span class="line"><span class="variable">$1</span> = 0x0</span><br></pre></td></tr></tbody></table></figure><p>在这里学到了kill指令：不用使用quit直接退出gdb，这样比较麻烦。直接kill掉当前的程序调用即可   </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">kill</span></span><br><span class="line">Kill the program being debugged? (y or n) y</span><br></pre></td></tr></tbody></table></figure><h3 id="3-设置断点，查看前后值的变化"><a href="#3-设置断点，查看前后值的变化" class="headerlink" title="3. 设置断点，查看前后值的变化"></a>3. 设置断点，查看前后值的变化</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b 8</span><br><span class="line">Breakpoint 1 at 0x8048486: file segfault.c, line 8.</span><br></pre></td></tr></tbody></table></figure><p>再次运行程序,查看buf在断点前后值的变化</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: /home/gaoxuanyu/home/gdb_test/test </span><br><span class="line"></span><br><span class="line">Breakpoint 1, main (argc=1, argv=0xbffffaf4) at segfault.c:8</span><br><span class="line">8         buf = malloc(1&lt;&lt;<span class="string">31);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//检查malloc调用前后buf值的变化。初始化buf以前，其值应该是一个随机杂乱值（garbage）</span></span><br><span class="line"><span class="string">(gdb) print buf</span></span><br><span class="line"><span class="string">$2 = 0xbffffaa8 "鳃?\177\003@t`\001@\001"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//step over（单步执行）malloc调用然后再次检查buf的值：</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">10        fgets(buf, 1024, stdin);</span></span><br><span class="line"><span class="string">(gdb) print buf</span></span><br><span class="line"><span class="string">$3 = 0x0</span></span><br></pre></td></tr></tbody></table></figure><p>调用了malloc之后，buf是NULL。<br>malloc在不能分配够所需的内存的时候就会返回NULL，因此确定是malloc失败了</p><p>因为表达式1&lt;&lt;256（整型1左移128次）内存不够分的，因此malloc必然会失败。此外，在fgets中我们只读入1024字节。所有的额外空间都会白白浪费掉，尽管我们可以分配到。这里我们将1&lt;&lt;31改为1024（或者1&lt;&lt;9），这样程序就会按照我们的期望运行了：</p><hr><p>第一篇博客，记录日常踩坑，望终有一天能成为大佬，甚至巨佬… 淦！</p>]]></content>
      
      
      
        <tags>
            
            <tag> gdb </tag>
            
            <tag> cpp </tag>
            
            <tag> 日常踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三月一</title>
      <link href="/2023/03/01/Markdown_%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
      <url>/2023/03/01/Markdown_%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<br><h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><blockquote><p>这是引用</p></blockquote><ul><li>vuke</li><li>fuc</li><li>sa</li></ul><ol><li>瓦</li><li>21</li></ol><ul><li><p><input disabled="" type="checkbox"> </p></li><li><p><input checked="" disabled="" type="checkbox"> </p></li><li><p><input disabled="" type="checkbox"> 不勾选</p></li><li><p><input checked="" disabled="" type="checkbox"> 勾选</p></li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sr&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>‘’’</p><p><strong>CODING，让开发更简单</strong></p><p><em>CODING，让开发更简单</em></p><p><em><strong>CODING，让开发更简单</strong></em></p><p><em><strong>CODING，让开发更简单</strong></em></p><p><del>CODING，让开发更简单</del></p><p><a href="http://coding.net/">超强大的云开发平台 CODING</a></p><table><thead><tr><th>First Header</th><th>Second Header</th><th>Third Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th align="left">First Header</th><th align="center">Second Header</th><th align="right">Third Header</th></tr></thead><tbody><tr><td align="left">Left</td><td align="center">Center</td><td align="right">Right</td></tr><tr><td align="left">Left</td><td align="center">Center</td><td align="right">Right</td></tr></tbody></table><p>这是分隔线上部分内容</p><hr><p>这是分隔线上部分内容</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
