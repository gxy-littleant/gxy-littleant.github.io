<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自旋锁和互斥锁</title>
      <link href="/2023/05/08/%E8%87%AA%E6%97%8B%E9%94%81%E5%92%8C%E4%BA%92%E6%96%A5%E9%94%81/"/>
      <url>/2023/05/08/%E8%87%AA%E6%97%8B%E9%94%81%E5%92%8C%E4%BA%92%E6%96%A5%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="互斥锁和自旋锁"><a href="#互斥锁和自旋锁" class="headerlink" title="互斥锁和自旋锁"></a>互斥锁和自旋锁</h1><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>互斥锁是一种独占锁，当线程A加锁成功后，此时互斥锁已经被线程A独占了，只要线程A没有释放手中的锁，线程B就会失败，就会释放掉CPU给其他线程，线程B加锁的代码就会被阻塞。</p><p>互斥锁加锁失败而阻塞是由操作系统内核实现的，当加锁失败后，内核将线程置为睡眠状态，等到锁被释放后，内核会在合适的时机唤醒线程，当这个线程加锁成功后就可以继续执行。</p><p>互斥锁加锁失败后，会从用户态陷入到内核态，让内核帮助我们切换线程，虽然简化了使用锁的难度，但是存在一定的性能开销成本。</p><p>性能开销成本：两次线程上下文切换的成本。</p><ol><li>当线程加锁失败时，内核将线程的状态从【运行】切换到睡眠状态，然后把CPU切换给其他线程运行；</li><li>当锁被释放时，之前睡眠状态的线程会变成就绪状态，然后内核就会在合适的时间把CPU切换给该线程运行；</li></ol><p>当两个线程属于同一个进程，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据。</p><p>上下切换的耗时大概在几十纳秒到几微秒之间，<strong>如果锁住的代码执行时间比较短，可能上下文切换的时间比锁住的代码执行时间还要长。</strong><br><strong>若是能确定被锁住的代码执行时间很短，就不应该使用互斥锁，而应该选择自旋锁。</strong></p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>自旋锁通过CPU提供的CAS，在<strong>用户态完成加锁和解锁操作</strong>，不会主动产生线程上下文切换，所以相比互斥锁来说，会快一些开销小一些。</p><p>加锁过程：<br>● 查看锁的状态，若是空闲的则执行2</p><p>● 将锁设置为当前线程持有；使用自旋锁的时候，当发生多线程竞争锁的情况，加锁失败的线程会忙等待，直到拿到锁。忙等待可以通过while循环实现，不过最好是使用CPU提供的PAUSE指令来实现。</p><p>自旋锁利用CPU周期一直自旋直到锁可用。<strong>由于一个自旋的线程永远不会放弃CPU，因此在单核CPU上，需要抢占式的调度器（不断通过时钟中断一个线程，运行其他线程）。</strong></p><p>自旋的时间和被锁住的代码执行的时间成正比关系。</p><p>当加锁失败，互斥锁使用线程切换应对，自旋锁用忙等待应对。更高级的锁都会选择其中一个实现 </p><hr><p>一直不理解自旋锁，给我的感觉就是一直占着CPU，不断轮询当前锁是否可用；事实上就是这样，只不过前提条件是多个CPU。<br>在单CPU条件下，需要<strong>抢占式的调度器</strong>，因为自旋锁不会放弃CPU（一直霸占CPU）<br>BTW，美团给个offer吧！求求了~</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>值得回顾的笔试题</title>
      <link href="/2023/04/03/%E5%80%BC%E5%BE%97%E5%9B%9E%E9%A1%BE%E7%9A%84%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AF%95%E9%A2%98/"/>
      <url>/2023/04/03/%E5%80%BC%E5%BE%97%E5%9B%9E%E9%A1%BE%E7%9A%84%E6%9A%91%E6%9C%9F%E5%AE%9E%E4%B9%A0%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>mark一下个人认为值得回顾的题</p><h2 id="3-11-美团笔试"><a href="#3-11-美团笔试" class="headerlink" title="3.11 美团笔试"></a>3.11 美团笔试</h2><h3 id="t2：最优规划"><a href="#t2：最优规划" class="headerlink" title="t2：最优规划"></a>t2：最优规划</h3><p><strong>题目描述</strong></p><p>小团在一个n*m的网格地图上探索。网格地图上第i行第j列的格子用坐标(ij)简记。初始时,小团的位置在地图的左上角,即坐标(1,1)。地图上的每一个格子上都</p><p>有一定的金币,特别地,小团位于的初始位置(1,1)上的金币为0。小团在进行探索移动时，可以选择向右移动一格(即从(x,y)到达(x，y+1))或向下移动一格(即从</p><p>(x，y)到达(x+1,y)）)。地图上的每个格子都有一个颜色,红色或蓝色。</p><p>如果小团一次移动前后的两个格子颜色不同，那么他需要支付k个金币才能够完成放一次移动;如果移动前后的两个格子颜色相同，则不需要支付金币。小团可以在</p><p>任意格子选择结束探索。</p><p>现在给你网格地图上每个格子的颜色与金币数量，假设小团初始时的金币数量为0，请你帮助小团计算出最优规划,使他能获得最多的金币，输出能获得的最多金币</p><p>数量即可。</p><p>注意:要求保证小团任意时刻金币数量不小于零。</p><p><strong>输入描述</strong></p><p>第一行是三个用空格隔开的整数n、m和k,表示网格地图的行数为n，列数为m，在不同颜色的两个格子间移动需要支付k个金币。</p><p>接下来n行，每行是一个长度为m的字符串，字符串仅包含字符’R’或’B’。第i行字符串的第j个字符表示地图上第i行第j列的格子颜色，如果字符为’R’则表示格子</p><p>颜色为红色，为’B’表示格子颜色为蓝色。</p><p>接下来是一个n行m列的非负整数矩阵，第i行第j列的数字表示地图上第i行第j列的格子上的金币数量。保证所有数据中数字大小都是介于[0,10]的整数。</p><p>1&lt;=n,m&lt;=200,1&lt;=k&lt;=5。</p><hr><p>当时感觉这道题不难，但始终没有AC后面下来想了想是因为在设置INT_MIN那块,应该用while设置而不是用if</p><p>后面自己写的：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">  <span class="type">int</span> n,m,k;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">  vector&lt;string&gt; colors;</span><br><span class="line">  colors.<span class="built_in">clear</span>();</span><br><span class="line">  string tmp_color;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">    cin&gt;&gt;tmp_color;</span><br><span class="line">    colors.<span class="built_in">push_back</span>(tmp_color);</span><br><span class="line">  }</span><br><span class="line">  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; map;</span><br><span class="line">  map.<span class="built_in">clear</span>();</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; row;</span><br><span class="line">  row.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="type">int</span> tmp;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++){</span><br><span class="line">      cin&gt;&gt;tmp;</span><br><span class="line">      row.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">    }</span><br><span class="line">    map.<span class="built_in">push_back</span>(row);</span><br><span class="line">    row.<span class="built_in">clear</span>();</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// d[i][j]:在i行j列 能够获得最大的金币数量是dp[i][j]</span></span><br><span class="line">  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m,<span class="number">0</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 行初始化</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++){</span><br><span class="line">    <span class="comment">//颜色相同 直接吃金币 累加</span></span><br><span class="line">    <span class="keyword">if</span>(colors[<span class="number">0</span>][i] == colors[<span class="number">0</span>][i<span class="number">-1</span>])</span><br><span class="line">      dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i<span class="number">-1</span>] + map[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">      <span class="comment">//颜色不同 且获得的金币总数&gt;=0</span></span><br><span class="line">      <span class="keyword">if</span>(dp[<span class="number">0</span>][i<span class="number">-1</span>] - k &gt;=<span class="number">0</span>){</span><br><span class="line">        dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i<span class="number">-1</span>] - k + map[<span class="number">0</span>][i];</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    res = <span class="built_in">max</span>(res,dp[<span class="number">0</span>][i]);</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 列初始化</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++){</span><br><span class="line">    <span class="keyword">if</span>(colors[i][<span class="number">0</span>] == colors[i<span class="number">-1</span>][<span class="number">0</span>])</span><br><span class="line">      dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>] + map[i][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">      <span class="keyword">if</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>] - k &gt;=<span class="number">0</span>){</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>] - k + map[i][<span class="number">0</span>];</span><br><span class="line">      }<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    res = <span class="built_in">max</span>(res,dp[i][<span class="number">0</span>]);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++){</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m;j++){</span><br><span class="line">      <span class="comment">// 向右走</span></span><br><span class="line">      <span class="keyword">if</span>(map[i][j] == INT_MIN) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="type">int</span> right = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(colors[i][j] == colors[i][j<span class="number">-1</span>]){</span><br><span class="line">        dp[i][j] = dp[i][j<span class="number">-1</span>] + map[i][j];</span><br><span class="line">        right = dp[i][j];</span><br><span class="line">      }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">if</span>(dp[i][j<span class="number">-1</span>] - k &gt;=<span class="number">0</span>){</span><br><span class="line">          dp[i][j] = dp[i][j<span class="number">-1</span>] - k + map[i][j];</span><br><span class="line">          right = dp[i][j];</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">        <span class="type">int</span> tmp_j = j;</span><br><span class="line">          <span class="keyword">while</span>(tmp_j+<span class="number">1</span> &lt; m){</span><br><span class="line">        map[i][tmp_j+<span class="number">1</span>] = INT_MIN;</span><br><span class="line">        tmp_j++;</span><br><span class="line">  } </span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 向下走</span></span><br><span class="line">      <span class="type">int</span> down = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(colors[i][j] == colors[i<span class="number">-1</span>][j]){</span><br><span class="line">        dp[i][j] = dp[i<span class="number">-1</span>][j] + map[i][j];</span><br><span class="line">        down = dp[i][j];</span><br><span class="line">      }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j] - k &gt;=<span class="number">0</span>){</span><br><span class="line">          dp[i][j] = dp[i<span class="number">-1</span>][j] -k + map[i][j];</span><br><span class="line">          down = dp[i][j];</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">    <span class="type">int</span> tmp_i = i;</span><br><span class="line">          <span class="keyword">while</span>(tmp_i+<span class="number">1</span>&lt;n){</span><br><span class="line">             map[tmp_i+<span class="number">1</span>][j] = INT_MIN;</span><br><span class="line">             tmp_i++;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      dp[i][j] = <span class="built_in">max</span>(down,right);</span><br><span class="line">      cout&lt;&lt;dp[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++){</span><br><span class="line">      res = <span class="built_in">max</span>(dp[i][j],res);</span><br><span class="line">      cout&lt;&lt;dp[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">  }</span><br><span class="line">   cout&lt;&lt;res;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p>网上大佬写的：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">  <span class="type">int</span> n,m,k;</span><br><span class="line">  cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">  vector&lt;string&gt; colors;</span><br><span class="line">  colors.<span class="built_in">clear</span>();</span><br><span class="line">  string tmp_color;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">    cin&gt;&gt;tmp_color;</span><br><span class="line">    colors.<span class="built_in">push_back</span>(tmp_color);</span><br><span class="line">  }</span><br><span class="line">  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; map;</span><br><span class="line">  map.<span class="built_in">clear</span>();</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; row;</span><br><span class="line">  row.<span class="built_in">clear</span>();</span><br><span class="line">  <span class="type">int</span> tmp;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++){</span><br><span class="line">      cin&gt;&gt;tmp;</span><br><span class="line">      row.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">    }</span><br><span class="line">    map.<span class="built_in">push_back</span>(row);</span><br><span class="line">    row.<span class="built_in">clear</span>();</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// d[i][j]:在i行j列 能够获得最大的金币数量是dp[i][j]</span></span><br><span class="line">  vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m,<span class="number">0</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 行初始化</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m;i++){</span><br><span class="line">    <span class="comment">//颜色相同 直接吃金币 累加</span></span><br><span class="line">    <span class="keyword">if</span>(colors[<span class="number">0</span>][i] == colors[<span class="number">0</span>][i<span class="number">-1</span>])</span><br><span class="line">      dp[<span class="number">0</span>][i] += map[<span class="number">0</span>][i];</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">      <span class="comment">//颜色不同 且获得的金币总数&gt;=0</span></span><br><span class="line">      <span class="keyword">if</span>(dp[<span class="number">0</span>][i<span class="number">-1</span>] - k &gt;=<span class="number">0</span>){</span><br><span class="line">        dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i<span class="number">-1</span>] - k + map[<span class="number">0</span>][i];</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    res = <span class="built_in">max</span>(res,dp[<span class="number">0</span>][i]);</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 列初始化</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++){</span><br><span class="line">    <span class="keyword">if</span>(colors[i][<span class="number">0</span>] == colors[i<span class="number">-1</span>][<span class="number">0</span>])</span><br><span class="line">      dp[i][<span class="number">0</span>] += map[i][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">      <span class="keyword">if</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>] - k &gt;=<span class="number">0</span>){</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>] - k + map[i][<span class="number">0</span>];</span><br><span class="line">      }<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    res = <span class="built_in">max</span>(res,dp[i][<span class="number">0</span>]);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++){</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m;j++){</span><br><span class="line">      <span class="comment">// 向右走</span></span><br><span class="line">      <span class="keyword">if</span>(map[i][j] == INT_MIN) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="type">int</span> right = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(colors[i][j] == colors[i][j<span class="number">-1</span>]){</span><br><span class="line">        dp[i][j] += dp[i][j<span class="number">-1</span>] + map[i][j];</span><br><span class="line">        right = dp[i][j];</span><br><span class="line">      }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">if</span>(dp[i][j<span class="number">-1</span>] - k &gt;=<span class="number">0</span>){</span><br><span class="line">          dp[i][j] = dp[i][j<span class="number">-1</span>] + map[i][j];</span><br><span class="line">          right = dp[i][j];</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line">          <span class="keyword">if</span>(j+<span class="number">1</span> &lt; m) map[i][j+<span class="number">1</span>] = INT_MIN;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 向下走</span></span><br><span class="line">      <span class="type">int</span> down = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(colors[i][j] == colors[i<span class="number">-1</span>][j]){</span><br><span class="line">        dp[i][j] += dp[i<span class="number">-1</span>][j] + map[i][j];</span><br><span class="line">        down = dp[i][j];</span><br><span class="line">      }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j] - k &gt;=<span class="number">0</span>){</span><br><span class="line">          dp[i][j] = dp[i<span class="number">-1</span>][j] + map[i][j];</span><br><span class="line">          down = dp[i][j];</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">          <span class="keyword">if</span>(i+<span class="number">1</span>&lt;n){</span><br><span class="line">             map[i][j] = INT_MIN;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      dp[i][j] = <span class="built_in">max</span>(down,right);</span><br><span class="line">      cout&lt;&lt;dp[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    }</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++){</span><br><span class="line">      res = <span class="built_in">max</span>(dp[i][j],res);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// cout&lt;&lt;res;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="t3：流星"><a href="#t3：流星" class="headerlink" title="t3：流星"></a>t3：流星</h3><p><strong>题目描述</strong></p><p>小美是一位天文爱好者，她收集了接下来一段时间中所有会划过她所在的观测地上空的流星信息。</p><p>具体地，她收集了n个流星在她所在观测地上空的出现时刻和消失时刻。对于一个流星，若其的出现时刻为s，消失时刻为t，那么小美在时间段[s, t]都能够观测</p><p>到它。对于一个时刻,观测地上空出现的流星数量越多，则小美认为该时刻越好。小美希望能够选择一个最佳的时刻进行观测和摄影，使她能观测到最多数量的流</p><p>星。</p><p>现在小美想知道，在这个最佳时刻,她最多能观测到多少个流星以及一共有多少个最佳时刻可供她选择。</p><p><strong>输入描述</strong></p><p>第一行是一个正整数n,表示流星的数量。</p><p>第二行是n个用空格隔开的正整数,第i个数si表示第i个流星的出现时间。第三行是n个用空格隔开的正整数，第i个数ti表示第i个流星的消失时间。</p><p>1&lt;=n&lt;=100000,1&lt;=si&lt;=ti&lt;=10的9次方</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2 1 5</span><br><span class="line">6 3 7</span><br></pre></td></tr></tbody></table></figure><hr><p>当时感觉这道题和力扣 “452. 用最少数量的箭引爆气球 “ 很像，就按照452的思路做了，但是没A过。后面看网上说用差分数列和前缀和就可以AC。</p><p>说实话差分数列和前缀和我都没听过…（或者听过没印象？是个菜鸡罢了）</p><p>在这里补充下前缀和和差分数列的知识</p><h4 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h4><p>前缀和就是前面i个数之和</p><p>即：sum[i]=num[1]+num[2]+……+num[i]</p><p>例：<br>sum[1]=num[1]</p><p>sum[2]=num[1]+num[2]</p><p>sum[3]=num[1]+num[2]+num[3]</p><p>sum[4]=num[1]+num[2]+num[3]+num[4]</p><p><strong>作用</strong></p><p>在理解了前缀和是什么以后，那么前缀和有什么作用呢？前缀和最大的用处就是可以对区间和进行o(1)查询</p><p>例：在上图中num[2]+num[3]+num[4]=sum[4]-sum[1]</p><p>也就是说，如果问题中需要多次对区间和进行查询，那么前缀和无疑是个很好地方法</p><p>为什么呢？</p><p>简单地证明下：</p><p>要求num数组【l，r】区间上的和，只需求出前缀数组sum后，sum[r]-sum[l-1]</p><ol><li><p>sum[l-1]=num[1]+num[2]+……+num[l-1]</p></li><li><p>sum[r] =num[1]+num[2]+……+num[l-1]+num[l]+……num[r-1]+num[r]</p></li></ol><p>2-1可得：sum[r]-sum[l-1]=num[l]+……num[r]</p><h4 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h4><p>差分数组就是数组中每个数减去前面一个数的差（除第一个为原来的数外）</p><p>即：cf[i]=num[i]-num[i-1]</p><p>cf[1]=num[1]</p><p>cf[2]=num[2]-num[1]</p><p>cf[3]=num[3]-num[2]</p><p>cf[4]=num[4]-num[3]</p><h4 id="差分数组与前缀和的关系"><a href="#差分数组与前缀和的关系" class="headerlink" title="差分数组与前缀和的关系"></a>差分数组与前缀和的关系</h4><p>我们对于差分数组进行前缀和操作，可以得到原数组sum1[] = num[]</p><p>num[i]=sum1[i]=cf[i]+cf[i-1]</p><h4 id="差分数组的应用"><a href="#差分数组的应用" class="headerlink" title="差分数组的应用"></a>差分数组的应用</h4><p>差分数组最常见的应用是对区间的修改</p><p>在区间修改常见的应用就是将对区间的修改改成O（1）</p><hr><p>这里给出此题的代码（网上参考大佬的），<strong>这道题要好好回顾，碰到过起码两次相似的题了，都会往452题上去想，有时间了用452的思路看看能不能A过。</strong></p><p>思路：</p><p>使用差分数组, 插入[from, to]区间的时候，使得mp[from]++, mp[to+1]–, 然后再通过前缀求和，就可以得到每个点的覆盖次数。需要注意的是 1^9+10的</p><p>数据情况下，我们不能模拟全部点，应该只保存端点，因此应该使用散列表。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ms(s,val) memset(s, val, sizeof(s))</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = INT_MAX;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> from[MAXN], to[MAXN], n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span>{</span><br><span class="line">    <span class="comment">// map 本身就是有序的</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; from[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; to[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">mp[from[i]]++;</span><br><span class="line">mp[to[i] + <span class="number">1</span>]--;</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> max_count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it : mp){</span><br><span class="line">count += it.second;</span><br><span class="line">max_count = <span class="built_in">max</span>(count, max_count);</span><br><span class="line">p.<span class="built_in">push_back</span>({it.first, count});</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果从某一端点开始可以取得最大值，那么此段点到下一端点范围的点都满足题意</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; p.<span class="built_in">size</span>(); i++){</span><br><span class="line"><span class="keyword">if</span>(p[i].second == max_count){</span><br><span class="line">ans += p[i+<span class="number">1</span>].first - p[i].first;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; max_count &lt;&lt; <span class="string">" "</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="3-7-携程笔试"><a href="#3-7-携程笔试" class="headerlink" title="3.7 携程笔试"></a>3.7 携程笔试</h2><h3 id="t4：游游去购物"><a href="#t4：游游去购物" class="headerlink" title="t4：游游去购物"></a>t4：游游去购物</h3><p><strong>题目描述</strong></p><p>游游正在进超市，有 n 个商品摆成一排，第 i 个商品的价格为 ai ，游游对它的喜爱度为 bi 。</p><p>所有商品的价格都是偶数。超市开展了一个活动，当游游花费原价买了一件商品时，她可以用半价买下一件右边相邻的商品(也可以用原价购买，这样该商品右边</p><p>的商品就有次享受半价的机</p><p>会)。但如果游游半价购买了一件商品，那么下一件右边相邻的商品只能原价购买。</p><p>换言之，如果游游想要半价买某一件商品，必须先用原价买下它相邻的左边的那个商品游游</p><p>初始的钱为 x ，她想要买的商品的喜爱度总和尽可能大，但总价格不能超过 x 。你能帮帮她计算最大的喜爱度总和吗？</p><p>现在小美想知道，在这个最佳时刻,她最多能观测到多少个流星以及一共有多少个最佳时刻可供她选择。</p><p><strong>输入描述</strong></p><p>第一行输入两个正整数 n 和 x ，分别代表商品的数量，以及游游初始的金额数。</p><p>第二行输入 n 个正整数 ai ，分别代表每个商品的价格。</p><p>第三行输入 n 个正整数 bi ，分别代表每个商品可以给游游带来的喜爱度。</p><p>1≤n,x,ai≤1000</p><p>1≤bi≤ 1e9 保证所有的 ai 都是偶数。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4 7</span><br><span class="line">2 2 6 2</span><br><span class="line">3 4 5 1</span><br><span class="line">:12</span><br><span class="line"></span><br><span class="line">3 3</span><br><span class="line">4 10 6</span><br><span class="line">3 2 4</span><br><span class="line">:0</span><br></pre></td></tr></tbody></table></figure><hr><p>典型的状态dp，这题把dp升维然后用0、1、2表示不买、全价买、半价买三个状态，才好做。</p><p>这样的题也是笔试中经常出现的题，值得好好回顾。</p><p>这里给出此题的代码（网上参考大佬的）</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000</span> + <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[N][N][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> n, x;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) cin &gt;&gt; b[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= x; j ++) {</span><br><span class="line">            <span class="comment">// 不买</span></span><br><span class="line">            dp[i][j][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j][<span class="number">0</span>], dp[i - <span class="number">1</span>][j][<span class="number">1</span>]);</span><br><span class="line">            dp[i][j][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i][j][<span class="number">0</span>], dp[i - <span class="number">1</span>][j][<span class="number">2</span>]);</span><br><span class="line">            <span class="comment">// 全价买（上一步的半价 + 上一步没买 + 上一步全价）</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt;= a[i]) {</span><br><span class="line">                dp[i][j][<span class="number">1</span>] = dp[i - <span class="number">1</span>][j - a[i]][<span class="number">0</span>] + b[i];</span><br><span class="line">                dp[i][j][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i][j][<span class="number">1</span>], dp[i - <span class="number">1</span>][j - a[i]][<span class="number">1</span>] + b[i]);</span><br><span class="line">                dp[i][j][<span class="number">1</span>] = <span class="built_in">max</span>(dp[i][j][<span class="number">1</span>], dp[i - <span class="number">1</span>][j - a[i]][<span class="number">2</span>] + b[i]);</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 半价买(需要上一步全价)</span></span><br><span class="line">            <span class="keyword">if</span> (j - a[i]/<span class="number">2</span> &gt;= <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][j - a[i] / <span class="number">2</span>][<span class="number">1</span>] &gt; <span class="number">0</span>) {</span><br><span class="line">                dp[i][j][<span class="number">2</span>] = <span class="built_in">max</span>(dp[i][j][<span class="number">2</span>], dp[i - <span class="number">1</span>][j - a[i] / <span class="number">2</span>][<span class="number">1</span>] + b[i]);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i][j][<span class="number">0</span>]);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i][j][<span class="number">1</span>]);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i][j][<span class="number">2</span>]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p>感觉最近比较松懈，精神上一直是绷直的，但是身体却总偷懒，经常发楞，效率低下，或者说在“假学习”…</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入一直为空？</title>
      <link href="/2023/03/14/%E8%BE%93%E5%85%A5%E4%B8%80%E7%9B%B4%E6%98%AF0%EF%BC%8C%E8%A0%A2%E5%93%AD/"/>
      <url>/2023/03/14/%E8%BE%93%E5%85%A5%E4%B8%80%E7%9B%B4%E6%98%AF0%EF%BC%8C%E8%A0%A2%E5%93%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="输入一直为空？"><a href="#输入一直为空？" class="headerlink" title="输入一直为空？"></a>输入一直为空？</h1><p>最近做暑期实习笔试，都是acm模式，需要自己输入输出。用cout打日志的时候就感觉很奇怪，一直不知道问题出在哪</p><p>现在终于知道了，我真是个zz。</p><p>因为我习惯用vector，每次定义vector的时候都喜欢初始化，比如：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){</span><br><span class="line">   cin&gt;&gt;tmp;</span><br><span class="line">   a.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">   cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>不管输出什么，每次输出都是0，也不知道问题出在哪。</p><p>最后想起来了，<strong>push_back 是在vector的后面添加元素，但初始化的时候已经限定了vector的大小</strong></p><p>所以可以这么改</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//甚至没必要加(5,0)</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">a.<span class="built_in">clear</span>()</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){</span><br><span class="line">   cin&gt;&gt;tmp;</span><br><span class="line">   a.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">   cout&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><p>这实在是太der了，被自己蠢死，下次笔试可得长个记性！<br>BTW，携程进面试了且一面结束，方向是客户端；美团竟然也进面试了？？？我不敢相信…，那得有多少人进面试啊</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 日常踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划 状态dp</title>
      <link href="/2023/03/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%E5%88%86%E7%8A%B6%E6%80%81/"/>
      <url>/2023/03/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20%E5%88%86%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划-状态dp"><a href="#动态规划-状态dp" class="headerlink" title="动态规划 状态dp"></a>动态规划 状态dp</h1><p>最近投暑期实习，笔试题中有很多动态规划的题。之前动态规划的题很早之前只做过一遍，早都没有印象了，笔试中遇到不少，在此记录几道<br>分别来自完美世界和携程 关于动态规划的题</p><hr><h2 id="完美-T-1"><a href="#完美-T-1" class="headerlink" title="完美 T.1"></a>完美 T.1</h2><p>题目：小明设计了一款游戏，一个角色有n个技能，每个技能分别能打出ai点伤害，技能次数可以无限用，问总共要正好打出target点伤害，最少要用几次技能？<br>输入：n,ai,target<br>输出：最少次数</p><p>解：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> target;</span><br><span class="line">    cin&gt;&gt;target</span><br><span class="line">    <span class="type">int</span> kill;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; skills;</span><br><span class="line">    skills.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">        cin&gt;&gt;kill;</span><br><span class="line">        skills.<span class="built_in">push_back</span>(kill);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target+<span class="number">1</span>,INT_MAX)</span></span>;</span><br><span class="line">    <span class="comment">// dp[i]:要打出i点伤害，最少用dp[i]次技能</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 确定递归公式：dp[i] = min(dp[i]，dp[i-skills[j]]+1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先遍历技能，再遍历目标伤害，注意遍历顺序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=target;j++){</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=skills[i] &amp;&amp; dp[j-skills[i]]!=INT_MAX)</span><br><span class="line">                dp[j] = <span class="built_in">min</span>(dp[j],dp[j-skills[i]]+<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dp[target]==INT_MAX) cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;dp[target];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这道题和leetcode上的322.零钱兑换是一样的</p><p>这道题要注意：</p><ul><li>首先是完全背包问题，<strong>01背包问题一维数组只能先遍历物品再遍历背包容量，且第二层for循环是从大到小遍历。</strong></li><li>其次是先遍历物品还是先遍历背包都是可以的，且<strong>第二层for循环是从小到大遍历</strong></li><li><strong>如果求组合数就是外层for循环遍历物品，内层for遍历背包</strong>。 <strong>如果求排列数就是外层for遍历背包，内层for循环遍历物品</strong>。<br>因为这道题只求组合数最小即可，所以遍历顺序不用在乎</li><li>INT_MIN、INT_MAX的头文件是 #include&lt;limits.h&gt;</li></ul><hr><h2 id="携程-T-4"><a href="#携程-T-4" class="headerlink" title="携程 T.4"></a>携程 T.4</h2><p>题目：小明正在逛超市，有n个商品摆成排，第个商品的价格为ai,小明对它的真爱度为b。所有商品的价格都是偶数。<br>超市开展了一个活动， 当游游花费原价买了一件商品时，她可以用半价买下一件右边相邻的商品(也可以用原价购买，这样该商品右边的商品<br>就有 一次享受半价的机会) 。但如果小明半价购买了一件商品， 那么下一件右边相邻的商品只能原价购买。<br>换言之，如果小明想要半价买某一件商品，必须先用原价买下它相邻的左边的那个商品。<br>小明初始的钱为 x，她想要买的商品的喜爱度总和尽可能大，但总价格不能超过 x，你能帮帮她计算最大的喜爱度总和吗?<br>n &amp; a大于1 小于 1000<br>b大于1小于 10e9</p><p>解：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">// n元钱</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="comment">// num个物品</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cin&gt;&gt;num;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; prices;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; likes;</span><br><span class="line">prices.<span class="built_in">clear</span>();</span><br><span class="line">likes.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++){</span><br><span class="line">cin&gt;&gt;tmp;</span><br><span class="line">prices.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++){</span><br><span class="line">cin&gt;&gt;tmp;</span><br><span class="line">likes.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 0:不买  1：半价买   2：全价买</span></span><br><span class="line">vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(num,vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>,<span class="number">0</span>)));</span><br><span class="line"><span class="comment">//dp[i][j][0] : i元钱时 不买能达到的最大满意度</span></span><br><span class="line"><span class="comment">//dp[i][j][1] : i元钱时  半价买能达到的最大满意度</span></span><br><span class="line"><span class="comment">//dp[i][j][2] : i元钱时  全价买能达到的最大满意度</span></span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++){</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = n ;j&gt;=prices[i];j--){</span><br><span class="line">dp[i][j][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j][<span class="number">0</span>],<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j][<span class="number">1</span>],dp[i<span class="number">-1</span>][j][<span class="number">2</span>]));</span><br><span class="line">dp[i][j][<span class="number">1</span>] = dp[i<span class="number">-1</span>][j-prices[i]/<span class="number">2</span>][<span class="number">2</span>] + likes[i];</span><br><span class="line">dp[i][j][<span class="number">2</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j-prices[i]][<span class="number">0</span>]+ likes[i],<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j-prices[i]][<span class="number">1</span>]+ likes[i],dp[i<span class="number">-1</span>][j-prices[i]][<span class="number">2</span>]+ likes[i]));</span><br><span class="line">cout&lt;&lt;<span class="string">"for:"</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;dp[i][j][<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;dp[i][j][<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;dp[i][j][<span class="number">2</span>]&lt;&lt;endl;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">cout&lt;&lt;<span class="string">"-----------------------------"</span>&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="built_in">max</span>(dp[num<span class="number">-1</span>][n][<span class="number">1</span>] ,<span class="built_in">max</span>(dp[num<span class="number">-1</span>][n][<span class="number">0</span>] ,dp[num<span class="number">-1</span>][n][<span class="number">2</span>]))&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这题目跟股票题目有点像，也是分状态，但是上面的代码写的不对，现在还没找到问题在哪，先记录一下，后期更新</p><hr><p>不知道为啥，携程笔试答的很烂，第三题甚至没读懂题要干什么，竟然进面试了？<br>腾讯wxg一面说还不错，直接反手挂…<br>米哈游感谢信，寄<br>唉，暑期实习的笔试答的都挺烂的，算法题不能停啊…</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> dp </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>段错误</title>
      <link href="/2023/03/03/%E6%AE%B5%E9%94%99%E8%AF%AF/"/>
      <url>/2023/03/03/%E6%AE%B5%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="段错误如何调试？-附小demo"><a href="#段错误如何调试？-附小demo" class="headerlink" title="段错误如何调试？ 附小demo"></a>段错误如何调试？ 附小demo</h1><h2 id="Q：遇到段错误该如何解决"><a href="#Q：遇到段错误该如何解决" class="headerlink" title="Q：遇到段错误该如何解决"></a>Q：遇到段错误该如何解决</h2><hr><p>先说说gdb的基本命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">（gdb）<span class="built_in">help</span>：查看命令帮助，具体命令查询在gdb中输入<span class="built_in">help</span> + 命令,简写h</span><br><span class="line">（gdb）run：重新开始运行文件（run-text：加载文本文件，run-bin：加载二进制文件）,简写r</span><br><span class="line">（gdb）start：单步执行，运行程序，停在第一执行语句</span><br><span class="line">（gdb）list：查看原代码（list-n,从第n行开始查看代码。list+ 函数名：查看具体函数）,简写l</span><br><span class="line">（gdb）<span class="built_in">set</span>：设置变量的值</span><br><span class="line">（gdb）next：单步调试（逐过程，函数直接执行）,简写n</span><br><span class="line">（gdb）step：单步调试（逐语句：跳入自定义函数内部执行）,简写s</span><br><span class="line">（gdb）backtrace：查看函数的调用的栈帧和层级关系,简写bt</span><br><span class="line">（gdb）frame：切换函数的栈帧,简写f</span><br><span class="line">（gdb）info：查看函数内部局部变量的数值,简写i</span><br><span class="line">（gdb）finish：结束当前函数，返回到函数调用点</span><br><span class="line">（gdb）<span class="built_in">continue</span>：继续运行,简写c</span><br><span class="line">（gdb）<span class="built_in">print</span>：打印值及地址,简写p</span><br><span class="line">（gdb）quit：退出gdb,简写q</span><br><span class="line">（gdb）<span class="built_in">break</span>+num：在第num行设置断点,简写b</span><br><span class="line">（gdb）info breakpoints：查看当前设置的所有断点</span><br><span class="line">（gdb）delete breakpoints num：删除第num个断点,简写d</span><br><span class="line">（gdb）display：追踪查看具体变量值</span><br><span class="line">（gdb）undisplay：取消追踪观察变量</span><br><span class="line">（gdb）watch：被设置观察点的变量发生修改时，打印显示</span><br><span class="line">（gdb）i watch：显示观察点</span><br><span class="line">（gdb）<span class="built_in">enable</span> breakpoints：启用断点</span><br><span class="line">（gdb）<span class="built_in">disable</span> breakpoints：禁用断点</span><br><span class="line">（gdb）x：查看内存x/20xw 显示20个单元，16进制，4字节每单元</span><br></pre></td></tr></tbody></table></figure><p><a href="https://zhuanlan.zhihu.com/p/474736535#:~:text=GDB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%201%201%E3%80%81%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4%20run%EF%BC%9A%E7%AE%80%E8%AE%B0%E4%B8%BA%20r%20%EF%BC%8C%E5%85%B6%E4%BD%9C%E7%94%A8%E6%98%AF%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%BD%93%E9%81%87%E5%88%B0%E6%96%AD%E7%82%B9%E5%90%8E%EF%BC%8C%E7%A8%8B%E5%BA%8F%E4%BC%9A%E5%9C%A8%E6%96%AD%E7%82%B9%E5%A4%84%E5%81%9C%E6%AD%A2%E8%BF%90%E8%A1%8C%EF%BC%8C%E7%AD%89%E5%BE%85%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E4%B8%8B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%91%BD%E4%BB%A4%E3%80%82%20continue%20%EF%BC%88%E7%AE%80%E5%86%99c,4%E3%80%81%E6%89%93%E5%8D%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%20...%205%205%E3%80%81%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8C%E4%BF%A1%E6%81%AF%20...%206%206%E3%80%81%E5%88%86%E5%89%B2%E7%AA%97%E5%8F%A3%20">附gdb常用命令</a></p><p>个人感觉常用的就几个,也可能是我菜，没用过高级的 <span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">（gdb）r: 重新开始运行文件</span><br><span class="line">（gdb）l: 查看原代码</span><br><span class="line">（gdb）s: 单步调试（逐语句：跳入自定义函数内部执行）</span><br><span class="line">（gdb）n: 单步调试（逐过程，函数直接执行，不进入）</span><br><span class="line">（gdb）bt: 查看函数的调用的栈帧和层级关系</span><br><span class="line">（gdb）frame: 切换函数的栈帧，简写f</span><br><span class="line">（gdb）info breakpoints：查看当前设置的所有断点</span><br><span class="line">（gdb）p: 打印值及地址,简写p</span><br><span class="line">（gdb）quit: 退出gdb,简写q</span><br><span class="line">（gdb）<span class="built_in">break</span>+num：在第num行设置断点,简写 b 3</span><br><span class="line">（gdb）<span class="built_in">kill</span>: 停止当前调试(q会直接退出gdb，<span class="built_in">kill</span>仅停止当前调试)</span><br></pre></td></tr></tbody></table></figure><hr><p>ok，现在开始正文</p><p>段错误：访问的内存超出了系统所给这个程序的内存空间</p><h3 id="1-先写一段会出现段错误的代码"><a href="#1-先写一段会出现段错误的代码" class="headerlink" title="1. 先写一段会出现段错误的代码"></a>1. 先写一段会出现段错误的代码</h3><p>gdb_demo.cpp：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">   <span class="type">char</span> *buf;</span><br><span class="line"> </span><br><span class="line">   buf = <span class="built_in">malloc</span>(<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">fgets</span>(buf, <span class="number">1024</span>, stdin);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译链接成可执行文件，一定加 -g 编译时，产生调试信息<br>运行可执行文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">: g++ -g -o <span class="built_in">test</span> gdb_demo.cpp</span><br><span class="line">: ./test</span><br></pre></td></tr></tbody></table></figure><p>此时会产生core文件。<br><a href="images/core.png">core文件</a></p><p>说到这，当时用本机wsl子系统写gdb调试段错误的时候，一直没生成core文件，查了半天也没解决，用了开发机，设置一下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -c unlimited</span><br></pre></td></tr></tbody></table></figure><p>就可以生成了，<strong>但是在本机上不能，至今也没有找到解决答案</strong></p><h3 id="2-终端会显示段错误，启动gdb调试"><a href="#2-终端会显示段错误，启动gdb调试" class="headerlink" title="2. 终端会显示段错误，启动gdb调试"></a>2. 终端会显示段错误，启动gdb调试</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb demo</span><br><span class="line">(gdb run)</span><br></pre></td></tr></tbody></table></figure><p><a href="images/segment_err.png">段错误</a></p><p>其实已经把错误的地方告诉你了，通过</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line">(gdb) frame 3</span><br></pre></td></tr></tbody></table></figure><p>只关心我们自己的代码，因此我们就切换到3号堆栈帧（stack frame3）来看看程序在哪里崩溃的</p><p><a href="images/frame3.png">frame3</a></p><p>只看出错的地方，这样当程序或者代码多的时候方便查看。</p><p>查看buf当前值：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p buf</span><br><span class="line"><span class="variable">$1</span> = 0x0</span><br></pre></td></tr></tbody></table></figure><p>在这里学到了kill指令：不用使用quit直接退出gdb，这样比较麻烦。直接kill掉当前的程序调用即可   </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) <span class="built_in">kill</span></span><br><span class="line">Kill the program being debugged? (y or n) y</span><br></pre></td></tr></tbody></table></figure><h3 id="3-设置断点，查看前后值的变化"><a href="#3-设置断点，查看前后值的变化" class="headerlink" title="3. 设置断点，查看前后值的变化"></a>3. 设置断点，查看前后值的变化</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b 8</span><br><span class="line">Breakpoint 1 at 0x8048486: file segfault.c, line 8.</span><br></pre></td></tr></tbody></table></figure><p>再次运行程序,查看buf在断点前后值的变化</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: /home/gaoxuanyu/home/gdb_test/test </span><br><span class="line"></span><br><span class="line">Breakpoint 1, main (argc=1, argv=0xbffffaf4) at segfault.c:8</span><br><span class="line">8         buf = malloc(1&lt;&lt;<span class="string">31);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//检查malloc调用前后buf值的变化。初始化buf以前，其值应该是一个随机杂乱值（garbage）</span></span><br><span class="line"><span class="string">(gdb) print buf</span></span><br><span class="line"><span class="string">$2 = 0xbffffaa8 "鳃?\177\003@t`\001@\001"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//step over（单步执行）malloc调用然后再次检查buf的值：</span></span><br><span class="line"><span class="string">(gdb) n</span></span><br><span class="line"><span class="string">10        fgets(buf, 1024, stdin);</span></span><br><span class="line"><span class="string">(gdb) print buf</span></span><br><span class="line"><span class="string">$3 = 0x0</span></span><br></pre></td></tr></tbody></table></figure><p>调用了malloc之后，buf是NULL。<br>malloc在不能分配够所需的内存的时候就会返回NULL，因此确定是malloc失败了</p><p>因为表达式1&lt;&lt;256（整型1左移128次）内存不够分的，因此malloc必然会失败。此外，在fgets中我们只读入1024字节。所有的额外空间都会白白浪费掉，尽管我们可以分配到。这里我们将1&lt;&lt;31改为1024（或者1&lt;&lt;9），这样程序就会按照我们的期望运行了：</p><hr><p>第一篇博客，记录日常踩坑，望终有一天能成为大佬，甚至巨佬… 淦！</p>]]></content>
      
      
      
        <tags>
            
            <tag> gdb </tag>
            
            <tag> cpp </tag>
            
            <tag> 日常踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三月一</title>
      <link href="/2023/03/01/Markdown_%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
      <url>/2023/03/01/Markdown_%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<br><h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><blockquote><p>这是引用</p></blockquote><ul><li>vuke</li><li>fuc</li><li>sa</li></ul><ol><li>瓦</li><li>21</li></ol><ul><li><p><input disabled="" type="checkbox"> </p></li><li><p><input checked="" disabled="" type="checkbox"> </p></li><li><p><input disabled="" type="checkbox"> 不勾选</p></li><li><p><input checked="" disabled="" type="checkbox"> 勾选</p></li></ul><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sr&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>‘’’</p><p><strong>CODING，让开发更简单</strong></p><p><em>CODING，让开发更简单</em></p><p><em><strong>CODING，让开发更简单</strong></em></p><p><em><strong>CODING，让开发更简单</strong></em></p><p><del>CODING，让开发更简单</del></p><p><a href="http://coding.net/">超强大的云开发平台 CODING</a></p><table><thead><tr><th>First Header</th><th>Second Header</th><th>Third Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><table><thead><tr><th align="left">First Header</th><th align="center">Second Header</th><th align="right">Third Header</th></tr></thead><tbody><tr><td align="left">Left</td><td align="center">Center</td><td align="right">Right</td></tr><tr><td align="left">Left</td><td align="center">Center</td><td align="right">Right</td></tr></tbody></table><p>这是分隔线上部分内容</p><hr><p>这是分隔线上部分内容</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
